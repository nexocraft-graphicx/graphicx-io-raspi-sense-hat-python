from nexocraft.wireformat import Timeseries

import nexocraft.wireformat


def compose_payload(now, ts_values):
    print("Composing payload at: " + str(now))
    temperature_value = ts_values[0]
    relative_humidity_value = ts_values[1]
    barometric_pressure_value = ts_values[2]

    # given the current time in UTC
    # and time series values generated by the ts_values_generator.py
    # we prepare the creation of the payload of the MQTT message
    # using the nexocraft wireformat implementation
    with nexocraft.wireformat.compose_batch() as batch:

        ts1 = batch.add_timeseries(
            data_type=Timeseries.DataType.NUMERIC,
            group="industrial_environment",
            source="climate_sensor_1_temperature",
            unit=4408652,
            name="Temperature"
        )
        ts1.add_value(timestamp=now, value=temperature_value)

        ts2 = batch.add_timeseries(
            data_type=Timeseries.DataType.NUMERIC,
            group="industrial_environment",
            source="climate_sensor_1_relative_humidity",
            unit=20529,
            name="Relative humidity"
        )
        ts2.add_value(timestamp=now, value=relative_humidity_value)

        ts2 = batch.add_timeseries(
            data_type=Timeseries.DataType.NUMERIC,
            group="industrial_environment",
            source="climate_sensor_1_barometric_pressure",
            unit=4274487,
            name="Barometric pressure"
        )
        ts2.add_value(timestamp=now, value=barometric_pressure_value)

    payload = batch.message
    print("Composed payload at: " + str(now))
    return payload
